import UIKit

/*:
# 앨런 - Swift 마스터 스쿨 10기
*/
/*:
## 첫번째 테스트 (2주차)
---
*/
/**>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 그동안 배운 내용의 복습 및 약간의 응용이 들어가 있을 뿐입니다. 이 문제를 잘 풀 수 있다고
 좋은 개발자가 될 수 있는 것도 아니고, 실망하거나 좌절할 필요도 없습니다.
 우린 이제 시작일 뿐입니다. 😄
 가장 중요한 것은 포기하지 않고, 꾸준함을 유지하는 것일뿐!
 안풀리면, 다음 문제로 넘어가면되고, 이번에 못풀면 잘 공부해서, 다음 번에 똑같은 문제를 잘 풀면됩니다.
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>**/

// 서술형의 경우, 주석처리를 하고 작성하면 됩니다.
// (시간이 약간 모자랄 수도 있을 것 같긴한데, 되는 대로 풀어서, 슬랙 DM으로 전달해 주세요!)


/**==================================================================
 [1번 문제]
  - 하나의 앱이 실행되면, 메모리는 어떤 4가지 영역으로 나누어 지나요? 4가지 영역의 이름을 쓰세요.
 ===================================================================**/

// 코드 - 데이터 - 힙 - 스택



/**==================================================================
 [2번 문제]
  - 프로그래밍에서, 표현식(Expresstion)이 어떤 의미인가요? 아는대로 작성하세요.
 ===================================================================**/


// 계산의 결과가 어떤 하나의 값으로 나올 수 있는 문장
// (예시) num + 5




/**==================================================================
 [3번 문제]
  -  반복문을 사용해서, 1부터 10까지 값을 더한 결과값을 출력하는 코드를 작성해 보세요.
    (힌트: 변수를 하나 만들고, 해당 변수를 이용 어떤 반복문을 어떻게 사용할지 고민해 보세요.)
 ===================================================================**/

var sum = 0

for i in 1...10 {
    sum += i
}

print(sum)




/**==================================================================
 [4번 문제]
  -  튜플이 뭔가요? 간단한 개념을 1-2줄로 서술 하고, 간단한 코드 예시를 하나 만들어 보세요.
 ===================================================================**/

// "연관된 데이터"를 하나로 묶어서 간단하게 사용하는 타입

var tuple = ("홍길동", 20, "서울")

var coordinate = (5, 10)



/**==================================================================
 [5번 문제]
  -  구구단을 2단부터, 9단까지 출력하는 코드를 반복문을 사용해서 만들어 보세요.
    (힌트: 어떤게 반복이 되어야 할까요? 구구단에서 반복이 되는 부분이 어디죠?)
 ===================================================================**/


for i in 2...9 {
    for j in 1...9 {
        print("\(i) X \(j) = \(i * j)")
    }
}




/**==================================================================
 [6번 문제]
  - 함수 만들어 보기: 여러개의 정해지지 않은 갯수의 정수를 받아서, 평균을 구하는 함수를 작성해 보세요.
    (힌트: 함수의 이름은 누구봐도 알아볼 수 있게, 평균..이란 말이 들어가면 좋겠네요!)
 ===================================================================**/


func makeAverage(nums: Int...) -> Double {
    var sum = 0
    
    for i in nums {
        sum += i
    }
    
    return Double(sum) / Double(nums.count)
}

makeAverage(nums: 4, 2, 7)


// 주의점
// 1) 가변 파라미터 주의
// (파라미터의 갯수가 정해지지 않은 경우의 input을 정의하는 법)

// 2) 실수형으로 리턴
// 정수라도 평균으로 결과값이 나온다 하면,
// 보통 실수의 형태로 나올 가능성이 크므로.. 실수형으로 리턴하는 부분 주의 ⭐️ (정수형으로 리턴하면 안됨)




/**==================================================================
 [7번 문제]
 - 함수만들어 보기: 2개의 정수를 입력 받아, 그 숫자들을 더한 결과값을 문자열로 반환하는
   함수를 작성해 보세요.
   (힌트: 문자열로 반환하려면, 함수 안에서 변환의 과정이 한번 필요하겠네요.)
 ===================================================================**/


func add(a: Int, b: Int) -> String {
    return String(a + b)
}


print(add(a: 3, b: 4))




/**==================================================================
 [8번 문제]
  - 함수의 파라미터에서 사용하는 inout키워드에 대해서, 간단하게 설명해 보세요.
 ===================================================================**/

// 함수의 파라미터에서 inout 키워드를 사용하면,
// 파라미터로 사용하는 변수의 직접적인 메모리 주소를 전달함

// 그래서 보통 두 숫자를 직접적으로 바꿀 수 있는 swap과 같은 함수를 구현할 수 있게 됨
// (두 숫자를 바꾸기 위해서는 함수 내부에서 상수로 사용하면 안되고, 직접 변수의 주소 전달이 필요)




/**==================================================================
 [9번 문제]
  -  다음의 제어전송문 4가지를 각각 쓰이는 경우와 어떻게 사용되는지 간단하게 설명하세요.
    (break / fallthrough / continue / return)
    (힌트1: break는 2가지 경우에 쓰입니다.)
    (힌트2: return은 리턴타입이 있는 함수/리턴타입이 없는 함수 구분해서, 설명해 주세요.)
 ===================================================================**/

// 1.break문
// 반복문(for/while)에서 break - (가장 가까운) 반복문을 완전히 종료
// switch문에서 break - case에서 어떤 문장의 실행도 없을 때 입력하는 약속


// 2.fallthrough문
// switch문에서 어떤 해당 case를 해당한 후, 다음 case의 해당 여부를
// 따지지 않고, 다음 case 내부의 문장을 실행


// 3.continue문
// 반복문에서 (가장 가까운) 반복의 이번 주기를 끝내고 다음 주기로 바로 넘어가서,
// 다음 주기를 실행


// 4.return문
// 1) return 타입이 없는 경우 - 해당 함수를 종료하고 벗어남
// 2) return 타입이 있는 경우 - return 문 뒤의 표현식을 평가한 후, 그 값을 반환하면서 함수를 종료하고 벗어남




/**==================================================================
 [10번 문제]
  - nil이 뭘까요? 아는대로 설명해 보세요!
 ===================================================================**/

// 스위프트에서 값이 없음을 나타내는 키워드
// 일반적으로 메모리에 실제 값이 없으면 앱이 꺼지는 에러가 발생하기 때문에(null point exception)
// 스위프트에서 이런 에러를 방지 하기 위해, 임시적인 타입을 열거형으로 만들어서
// .some과 .none의 케이스 중에 .none에 해당
// 임시적인 타입으로 값이 없음을 나타내는 개념이고, 실제 언래핑해서 값이 없으면 실제 에러 발생(앱이 꺼짐)
// 그래서, 메모리에 값이 없음으로 발생할 수 있는 앱이 꺼지는 에러를
// 방지할 수 있도록 한번 임시타입으로 걸러주는 역할



/**==================================================================
 [11번 문제]
  - Optional 타입에는 .none이 있는데, 이것과 nil의 공통점 또는 차이점은?
 ===================================================================**/

// nil은 Optional.none의 리터럴 값의 형태 (그냥 같다고 생각해도 무방)

// nil을 쓸 수 있는 자리에, Optional.none을 사용(대체) 가능
// Optional.none은 옵셔널을 열거형으로 표현해서, 값이 없음을 나타내는 것일뿐
// nil(값이 없음을 나타내는 키워드)와 완벽히 동일




/**==================================================================
 [12번 문제]
  - Optional을 언래핑(Unrapping) 하는 4가지 방법은? 간단하게 서술로 쓰시면 됩니다.
 ===================================================================**/

// 1번 방법
// 강제 언래핑 (!)


// 2번 방법
// if문으로 nil이 아님을 확인 한후, if문 안에서 강제 언래핑


// 3번 방법
// 옵셔널 바인딩(if let 바인딩)


// 4번 방법
// 옵셔널표현식 ?? 디폴트값의 제시




/**==================================================================
 [13번 문제]
  - 열거형(Enum)은 어떤 경우에 사용하는 타입인가요? 아는대로 간단하게 서술해 보세요.
 ===================================================================**/

// 한정된 갯수의 사례(case)로 타입을 만들 수 있을때,
// 개발자가 직접만들어서 쓸 수 있는 Custom 타입
// 월 - 화 - 수 - 목 - 금 - 토 - 일




/**==================================================================
 [14번 문제]
 구글(google), 페이스북(facebook), 네이버(naver) 로그인을 위해 SiteLogin라는 이름을 가진
 아래의 Enum 타입을 완성해 보세요.
 
 각 case는 사용자의 아이디(String)와 비밀번호(String)를 위한 연관 값(associated value)을  가집니다.
 
 (만들고자 하는 타입 예시)
 enum SiteLogin { }
 
 (변수에 담았을때의 모습)
 var login1 = SiteLogin.google("google@gmail.com", "0000")
 
  (힌트: 연관값이라는 개념을 어떻게 사용해야 하죠?)
 ===================================================================**/

// 아래의 enum타입 완성

enum SiteLogin {
    case google(String, String)
    case facebook(String, String)
    case naver(String, String)
}


var login1 = SiteLogin.google("google@gmail.com", "0000")



// 또는 아래의 형태의 구현도 좋음

enum SiteLogin2 {
    case google(id: String, password: String)
    case facebook(id: String, password: String)
    case naver(id: String, password: String)
}





/**>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 수고 하셨습니다. 😄
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>**/
